#=================================================
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: kenzo
#=================================================

name: openwrt_21.02

on:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'ssh-actions'
    
env:
  Github: https://github.com/${{github.repository}}
  Author: ${{github.actor}}
  Apidz: ${{github.repository}}
  Run_number: ${{github.run_number}}
  Run_workflow: ${{github.workflow}}
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
  PUSH_PLUS_TOKEN: ${{ secrets.PUSH_PLUS_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  UPLOAD_CONFIG: true
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  REGULAR_UPDATE: true
  BY_INFORMATION: true
  CODE: OpenWrt
  OpenWrt_name: 21.02
  TARGET_PROFILE: x86-64
  CangKu: ${Apidz##*/}
  TZ: Asia/Shanghai
    
jobs:
  build:
    runs-on: Ubuntu-22.04   
    if: github.event.repository.owner.id == github.event.sender.id

    name: Build
    strategy:
      fail-fast: false
      matrix:
        target: [Immortalwrt_source]
    
    steps:
    - name: 分配机器
      run: |
        echo -e "Total CPU cores\t: $(nproc)"
        cat /proc/cpuinfo | grep 'model name'
        ulimit -a
        
    - name: 检查
      uses: actions/checkout@main

    - name: 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        ( sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential clang flex g++ gawk gcc-multilib gettext \
        git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev swig libpython3-dev aria2 jq subversion qemu-utils ccache rename libelf-dev libfuse-dev
        sudo -E apt-get -qq purge azure-cli ghc* zulu* hhvm llvm* firefox powershell openjdk* dotnet* google* mysql* php* android*
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean ) &
        sudo timedatectl set-timezone "$TZ"

    - name: 设置当前的日期
      id: date
      run: |
        echo "Compile_Date=$(date +%Y%m%d%H%M)" >> $GITHUB_ENV
        echo "date=$(date +'%m/%d_%Y_%H/%M')" >> $GITHUB_ENV
        echo "date2=$(date +'%Y/%m %d')" >> $GITHUB_ENV
        echo "date3=$(date +'%m.%d')" >> $GITHUB_ENV
        VERSION="$(echo "${{github.event.action}}" | grep -Eo " [0-9.]+" | sed -e 's/ //')" || true
        [ "$VERSION" ] && echo "VERSION=$VERSION" >> $GITHUB_ENV || echo "VERSION=$(date +'%m.%d')" >> $GITHUB_ENV      

    - name: 克隆源代码
      env: 
        REPO_URL: https://github.com/immortalwrt/immortalwrt
        REPO_BRANCH: openwrt-21.02
        TZ: Asia/Shanghai        
      run: |
        sudo chown -R runner:runner /home/runner/work/AutoBuild-OpenWrt
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        mv -f build ./openwrt
        cd openwrt
        ln -sf /${{matrix.target}}/openwrt $GITHUB_WORKSPACE/openwrt
        echo "Home=${GITHUB_WORKSPACE}/openwrt" >> $GITHUB_ENV
        echo "PATH1=${GITHUB_WORKSPACE}/openwrt/build/${{matrix.target}}" >> $GITHUB_ENV
        sed -i '$a src-git waynesg https://github.com/waynesg/OpenWrt-Software.git;js' feeds.conf.default

    - name: 更新 & 安装 feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a
        
    - name: 自定义配置
      run: |
        cd openwrt
        cp -f "${Home}"/build/common/*.sh "${PATH1}"
        git clone https://github.com/waynesg/luci-app-autoupdate feeds/luci/applications/luci-app-autoupdate
        cp -Rf ./build/common/{AutoUpdate.sh,AutoBuild_Tools.sh,replace.sh} package/base-files/files/bin
        cp -Rf ./build/Immortalwrt_source/diy/* ./
        cp -Rf ./build/Immortalwrt_source/files ./ && chmod -R +x ./files
        cp -f feeds/waynesg/openwrt-diy/default-settings package/emortal/default-settings/files/99-default-settings
        rm -rf feeds/packages/net/{alist,adguardhome,brook,mosdns,redsocks*,trojan*,v2ray-*,xray*}
        sed -i 's/luci-theme-bootstrap/luci-theme-argon/g' feeds/luci/collections/luci/Makefile
        #cp -f feeds/waynesg/openwrt-diy/banner package/base-files/files/etc/banner
        #cp -Rf feeds/waynesg/openwrt-diy/argon  feeds/luci/modules/luci-base/htdocs/luci-static/
        sed -i "s/%D %V, %C/openwrt $(date +'%m.%d') by waynesg/g" package/base-files/files/etc/banner
        ./scripts/feeds update -a && ./scripts/feeds install -a
        cp -f feeds/waynesg/openwrt-diy/immortalwrt.config .config && make defconfig
        ./scripts/diffconfig.sh > ./config.txt
        
#    - name: 编译信息
#      run: |
#        cd openwrt
#        source "${PATH1}/common.sh" && Diy_chuli > /dev/null 2>&1
#        if [ "${REGULAR_UPDATE}" == "true" ]; then
#          source "${PATH1}/upgrade.sh" && Diy_Part2 > /dev/null 2>&1
#        fi
#        if [ "${BY_INFORMATION}" == "true" ]; then
#          source "${PATH1}/upgrade.sh" && GET_TARGET_INFO
#          source "${PATH1}/common.sh" && Diy_xinxi
#          chmod -R 755 .
#        fi
   
    - name: 下载包文件
      working-directory: ./openwrt
      run: |
        make download -j$(nproc)
        find dl -size -1024c -exec rm -f {} \;
        
    - name: 设置缓存
      uses: stupidloud/cachewrtbuild@main
      with:
        ccache: 'true'
        prefix: ${{ github.workspace }}/openwrt
        
    - name: SSH连接
      if: env.SSH_ACTIONS == 'true' || (github.event.inputs.ssh == 'ssh')
      uses: danshui-git/debugger-action@main
      env:
         TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
         TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        
    - name: 编译固件
      working-directory: ./openwrt
      run: |
        echo -e "$(($(nproc)+1)) thread compile"
        make -j$(($(nproc)+1)) || make -j1 V=s   
        echo "COMPILESTATUS=success" >> $GITHUB_ENV
        echo "date=$(date "+%Y%m%d%H%M%S")" >> $GITHUB_ENV
        echo "date1=$(date +'%m-%d')" >> $GITHUB_ENV
     
    - name: 检查空间使用情况
      if: (!cancelled())
      run: df -hT
      
    - name: 上传配置
      if: env.UPLOAD_CONFIG == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: .config_${{ env.CODE }}_${{ env.TARGET_PROFILE }}_${{ env.Compile_Date }}
        path: config.txt

    - name: 上传文件
      if: env.COMPILESTATUS == 'success' && env.UPLOAD_BIN_DIR == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: filename+ipk_${{ env.CODE }}_${{ env.TARGET_PROFILE }}_${{ env.Compile_Date }}
        path: openwrt/bin

    - name: 整理固件
      id: organizer
      run: |
        cd openwrt
        cp -Rf bin/targets/*/* "${Home}"/upgrade
        cd bin/targets/*/*
        find -name "*buildinfo*" | xargs -i rm -rf {}
        find -name "*sha256sums*" | xargs -i rm -rf {}
        find -name "*manifest*" | xargs -i rm -rf {}
        find -name "*vmlinuz*" | xargs -i rm -rf {}
        find -name "*Image*" | xargs -i rm -rf {}
        find -name "*rootfs*" | xargs -i rm -rf {}
        find -name "*efi.img*" | xargs -i rm -rf {}
        find -name "*kernel*" | xargs -i rm -rf {}
        rm -rf packages
        rename -v "s/^openwrt/${{ env.date1 }}-${{ env.CODE }}/" *
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "BOT=TRUE" >> $GITHUB_ENV
        echo "ORGANIZERSTATUS=success" >> $GITHUB_ENV         
      
    - name: 上传固件
      if: env.ORGANIZERSTATUS == 'success' && env.UPLOAD_FIRMWARE == 'true'
      uses: actions/upload-artifact@main
      with:
        name: ${{ env.OpenWrt_name }}-${{ env.CODE }}-${{ env.TARGET_PROFILE }}-firmware-${{ env.Compile_Date }}
        path: ${{ env.FIRMWARE }}
          
    - name: 发布信息
      if: env.ORGANIZERSTATUS == 'success' && env.UPLOAD_RELEASE == 'true'
      run: |
        echo "### $(date +"%Y年%m月%d号-%H点%M分")" > update_log.txt
 
    - name: 发布固件
      if: env.ORGANIZERSTATUS == 'success' && env.UPLOAD_RELEASE == 'true' && env.REPO_TOKEN
      uses: ncipollo/release-action@v1
      with:
        name: ${{ env.CODE }}-${{ env.TARGET_PROFILE }}
        tag: ${{ env.date }}
        token: ${{ secrets.REPO_TOKEN }}
        bodyFile: "update_log.txt"
        artifacts: "${{ env.FIRMWARE }}/*"
        
    - name: 更新Step 1
      if: env.COMPILESTATUS == 'success' && env.REGULAR_UPDATE == 'true' && env.REPO_TOKEN
      run: |
       cd openwrt
       source "${PATH1}/upgrade.sh" && Diy_Part3
        
    - name: 更新Step 2
      continue-on-error: true
      if: env.COMPILESTATUS == 'success' && env.REGULAR_UPDATE == 'true' && env.REPO_TOKEN
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.REPO_TOKEN }}
        file: openwrt/bin/Firmware/*
        tag: AutoUpdate
        overwrite: true

    - name: 更新Step 3
      if: env.COMPILESTATUS == 'success' && env.REGULAR_UPDATE == 'true'
      run: |
        mkdir -p Github_Tags
        cd Github_Tags
        wget -q --no-cookie --no-check-certificate https://api.github.com/repos/${{github.repository}}/releases/tags/AutoUpdate -O Github_Tags
        
    - name: 更新Step 4
      if: env.COMPILESTATUS == 'success' && env.REGULAR_UPDATE == 'true' && env.REPO_TOKEN
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.REPO_TOKEN }}
        file: Github_Tags/*
        tag: AutoUpdate
        overwrite: true
        file_glob: true
        
    - name: 完成通知
      if: env.COMPILESTATUS == 'success' && env.PUSH_PLUS_TOKEN && env.SERVERCHAN_SCKEY == 'PUSH' || env.COMPILESTATUS == 'success' && env.TELEGRAM_BOT_TOKEN && env.SERVERCHAN_SCKEY == 'TELE'
      run: |
        if [[ "${SERVERCHAN_SCKEY}" == "TELE" ]]; then
          curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=✨Congratulations✨：您使用【${{matrix.target}}】文件夹编译的[${{ env.CODE }}-${{ env.TARGET_PROFILE }}]固件(${{env.CangKu}}仓库的#${{env.Run_number}}号)顺利编译完成了！💐" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"
        elif [[ "${SERVERCHAN_SCKEY}" == "PUSH" ]]; then
          curl -k --data token="${{ secrets.PUSH_PLUS_TOKEN }}" --data title="[${{ env.CODE }}-${{ env.TARGET_PROFILE }}]编译成功" --data "content=✨Congratulations✨：您使用【${{matrix.target}}】文件夹编译的[${{ env.CODE }}-${{ env.TARGET_PROFILE }}]固件(${{env.CangKu}}仓库的#${{env.Run_number}}号)顺利编译完成了！💐" "http://www.pushplus.plus/send"
        fi
        
    - name: 删除工作流
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 0

    - name: 删除旧版本
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 6
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
        
