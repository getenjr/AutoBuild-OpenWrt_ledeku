name: X86-OpenWrt-Official

on:
#  schedule:
#    - cron: 5 6 * * 0
  watch:
    types: started

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Show system
      run: |
        echo -e "Total CPU cores\t: $(nproc)"
        cat /proc/cpuinfo | grep 'model name'
        ulimit -a
        
    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
        swap-size-mb: 2048
        root-reserve-mb: 2048
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        
    - name: Checkout
      uses: actions/checkout@main
      with:
          fetch-depth: 0
          
    - name: 读取设置
      run: |
        echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
        echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV
        echo "CONFIG_FILE=${CONFIG_FILE}" >> $GITHUB_ENV
        echo "DIY_PART_SH=${DIY_PART_SH}" >> $GITHUB_ENV
        echo "SSH_ACTIONS=${SSH_ACTIONS}" >> $GITHUB_ENV
        echo "UPLOAD_BIN_DIR=${UPLOAD_BIN_DIR}" >> $GITHUB_ENV
        echo "UPLOAD_CONFIG=${UPLOAD_CONFIG}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE=${UPLOAD_FIRMWARE}" >> $GITHUB_ENV
        echo "UPLOAD_COWTRANSFER=${UPLOAD_COWTRANSFER}" >> $GITHUB_ENV
        echo "UPLOAD_RELEASE=${UPLOAD_RELEASE}" >> $GITHUB_ENV
        echo "SERVERCHAN_SCKEY=${SERVERCHAN_SCKEY}" >> $GITHUB_ENV
        echo "REGULAR_UPDATE=${REGULAR_UPDATE}" >> $GITHUB_ENV
        echo "USE_CACHEWRTBUILD=${USE_CACHEWRTBUILD}" >> $GITHUB_ENV
        echo "BY_INFORMATION=${BY_INFORMATION}" >> $GITHUB_ENV
        echo "AUTOMATIC_AMLOGIC=${AUTOMATIC_AMLOGIC}" >> $GITHUB_ENV
        echo "CangKu=${Apidz##*/}" >> $GITHUB_ENV
        echo "Modelfile=${{matrix.target}}" >> $GITHUB_ENV
        echo "{name}={value}" >> $GITHUB_OUTPUT

    - name: Init build dependencies
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo swapoff -a
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install aria2
        sudo -E wget -P /usr/local/sbin/ https://github.com/HiGarfield/lede-17.01.4-Mod/raw/master/.github/backup/apt-fast
        sudo -E chmod -R 755 /usr/local/sbin/apt-fast
        sudo -E apt-fast -y -qq install dwarves llvm clang lldb lld build-essential rsync asciidoc binutils bzip2 gawk gettext git libncurses5-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc-s1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libreadline-dev libglib2.0-dev xmlto qemu-utils upx-ucl libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget ccache curl swig coreutils vim nano python3 python3-pip python3-ply haveged lrzsz scons libpython3-dev
        sudo -E pip3 install pyelftools
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo -E git config --global user.name 'GitHub Actions' && git config --global user.email 'noreply@github.com'
        df -h
    - name: Prepare Mixedwrt
      run: |
        sudo chown -R runner:runner /home/runner/work/AutoBuild-OpenWrt
        cp -r ./build/Official/SCRIPTS/X86/. ./build/Official/SCRIPTS/
        cp -r ./build/Official/SCRIPTS/. ./
        /bin/bash 01_get_ready.sh
    - name: Prepare Package
      run: |
        cd openwrt
        cp -r ../build/Official/SCRIPTS/. ./
        /bin/bash 02_prepare_package.sh
        /bin/bash 02_target_only.sh
        /bin/bash 04_remove_upx.sh
    - name: QTMDFW4
      run: |
        cd openwrt
        cp -rf ../build/Official/SEED/X86/config.seed .config
        /bin/bash 07_fw3.sh
    - name: Convert Translation
      run: |
        cd openwrt
        /bin/bash 03_convert_translation.sh
    - name: Add ACL
      run: |
        cd openwrt
        /bin/bash 05_create_acl_for_luci.sh -a
    - name: Make Config
      run: |
        cd openwrt
        make defconfig
    - name: Get Architecture
      working-directory: ${{ github.workspace }}/openwrt
      run: |
        TARGET_DEVICE_ARCH="$(grep "^CONFIG_TARGET_.*_.*=y$" ".config" | head -n 1 | sed 's/^CONFIG_TARGET_//g' | awk -F '_' '{print $1}')"
        echo "TARGET_DEVICE_ARCH=${TARGET_DEVICE_ARCH}" >>$GITHUB_ENV
        latest_release="$(curl -s https://github.com/openwrt/openwrt/tags | grep -Eo "v[0-9\.]+\-*r*c*[0-9]*.tar.gz" | sed -n '/[2-9][0-9]/p' | sed -n 1p | sed 's/.tar.gz//g' | sed 's/v//g')"
        echo "latest_release=${latest_release}" >>$GITHUB_ENV
    - name: Cache
      uses: HiGarfield/cachewrtbuild@main
      with:
        mixkey: ${{ env.TARGET_DEVICE_ARCH }}
        prefix: ${{ github.workspace }}/openwrt
    
    - name: 加载缓存
      if: env.USE_CACHEWRTBUILD == 'true'
      uses: stupidloud/cachewrtbuild@main
      with:
        ccache: 'true'
        prefix: ${{ github.workspace }}/openwrt
        
    - name: Make Download
      run: |
        cd openwrt
        make download -j50
        
    - name: Compile Openwrt
      id: compileopenwrt
      continue-on-error: true
      run: |
        cd openwrt
        #echo | make kernel_oldconfig -j$(($(nproc) + 1)) 
        IGNORE_ERRORS=1 make -j$(($(nproc) + 1))
        echo $?
        
    - name: If Error
      if: steps.compileopenwrt.outcome == 'failure'
      run: |
        cat openwrt/.config
        echo '================================================================'
        cd openwrt && make -j1 V=s
        
    - name: Print Disk Space After
      run: df -h
      
    - name: Organize files
      id: organize
      run: |
        echo "Home=${GITHUB_WORKSPACE}/openwrt" >> $GITHUB_ENV
        echo "PATH1=${GITHUB_WORKSPACE}/openwrt/build/Official" >> $GITHUB_ENV
        cd openwrt
        cp -Rf bin/targets/*/* "${Home}"/upgrade
        cd bin/targets/*/*
        find -name "*buildinfo*" | xargs -i rm -rf {}
        find -name "*sha256sums*" | xargs -i rm -rf {}
        find -name "*manifest*" | xargs -i rm -rf {}
        find -name "*vmlinuz*" | xargs -i rm -rf {}
        find -name "*Image*" | xargs -i rm -rf {}
        find -name "*rootfs*" | xargs -i rm -rf {}
        find -name "*efi.img*" | xargs -i rm -rf {}
        find -name "*kernel*" | xargs -i rm -rf {}
        rm -rf packages
        rename -v "s/^openwrt/${{ env.date1 }}-${{ env.CODE }}/" *
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "BOT=TRUE" >> $GITHUB_ENV
        echo "ORGANIZERSTATUS=success" >> $GITHUB_ENV   
        
    - name: 上传固件
      if: env.ORGANIZERSTATUS == 'success' && env.UPLOAD_FIRMWARE == 'true'
      uses: actions/upload-artifact@main
      with:
        name: ${{ env.OpenWrt_name }}-${{ env.CODE }}-${{ env.TARGET_PROFILE }}-firmware-${{ env.Compile_Date }}
        path: ${{ env.FIRMWARE }}
          
    - name: 发布信息
      if: env.ORGANIZERSTATUS == 'success' && env.UPLOAD_RELEASE == 'true'
      run: |
        echo "### $(date +"%Y年%m月%d号-%H点%M分")" > update_log.txt
 
    - name: 发布固件
      if: env.ORGANIZERSTATUS == 'success' && env.UPLOAD_RELEASE == 'true' && env.REPO_TOKEN
      uses: ncipollo/release-action@v1
      with:
        name: ${{ env.CODE }}-${{ env.TARGET_PROFILE }}
        tag: ${{ env.date }}
        token: ${{ secrets.REPO_TOKEN }}
        bodyFile: "update_log.txt"
        artifacts: "${{ env.FIRMWARE }}/*"
        
    - name: 更新Step 1
      if: env.COMPILESTATUS == 'success' && env.REGULAR_UPDATE == 'true' && env.REPO_TOKEN
      run: |
       cd openwrt
       source "${PATH1}/upgrade.sh" && Diy_Part3
        
    - name: 更新Step 2
      continue-on-error: true
      if: env.COMPILESTATUS == 'success' && env.REGULAR_UPDATE == 'true' && env.REPO_TOKEN
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.REPO_TOKEN }}
        file: openwrt/bin/Firmware/*
        tag: AutoUpdate
        overwrite: true
        file_glob: true
        
    - name: 更新Step 3
      if: env.COMPILESTATUS == 'success' && env.REGULAR_UPDATE == 'true'
      run: |
        mkdir -p Github_Tags
        cd Github_Tags
        wget -q --no-cookie --no-check-certificate https://api.github.com/repos/${{github.repository}}/releases/tags/AutoUpdate -O Github_Tags
        
    - name: 更新Step 4
      if: env.COMPILESTATUS == 'success' && env.REGULAR_UPDATE == 'true' && env.REPO_TOKEN
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.REPO_TOKEN }}
        file: Github_Tags/*
        tag: AutoUpdate
        overwrite: true
        file_glob: true
